<!-- This phtml provides the map and search pane for the CDASH Split Theme 
     This is very much a first draft of my first attempt to hack an Omeka theme.
     There are many opportunities to refactor this code to take advantage of 
      modularization, comply with the conventions and conveniences of Zend / Laminas 
    Feel free to use this and th shoot me feedback if you cae to point out ways that 
    this can work better.  I do intend to clen this up and to document it for sharing 
    during Fall / WInter 2020.
  Paul Cote, paulbcote@gmail.com
-->


<div id="map"></div>


<?php $infodot = $this->assetUrl('img/infodot.png'); ?>

<div id="overlayBoxes">

  <p><b>Map Overlays</b> <br>
  <span style="color: red; size: smaller;">Click features on map for more information.</span></p>
  <input type="checkbox" id="allMarkers">
  <label for="allMarkers">All CDASH locations </label>
<br>
  <input type="checkbox" id="histMarkers">
  <label for="histMarkers">Historical Markers</label>
  <div class="tooltip"><img src=<?php echo $infodot; ?>> 
  <span class="tooltiptext">Shared by <a href="https://www.cambridgema.gov/GIS/gisdatadictionary/Historical/HISTORICAL_NationalRegisterHistoricPlaces" target="Cdash_Link">Cambridge GIS</a></span></div>


  <br>
  <input type="checkbox" id="parcels">
  <label for="parcels">Property Parcels</label>
  <div class="tooltip"><img src=<?php echo $infodot; ?>> 
  <span class="tooltiptext">Shared by <a href="https://data.cambridgema.gov/Assessing/Assessing-Parcels/rst6-227j" target="Cdash_Link">Cambridge GIS</a></span></div>


<br>
  <input type="checkbox" id="macrisPoints">
  <label for="macrisPoints">MACRIS Points</label>
  <div class="tooltip"><img src=<?php echo $infodot; ?>> 
  <span class="tooltiptext">Shared by <a href="https://docs.digital.mass.gov/dataset/massgis-data-mhc-historic-inventory" target="Cdash_Link">Massachusetts Cultural Resources Information System</a></span></div>

  <br>
  <input type="checkbox" id="natRegister">
  <label for="natRegister">Nat. Register of Historic Places</label>
  <div class="tooltip"><img src=<?php echo $infodot; ?>> 
  <span class="tooltiptext">Shared by <a href="https://www.cambridgema.gov/GIS/gisdatadictionary/Historical/HISTORICAL_HistoricalMarkers" target="Cdash_Link">Cambridge GIS</a></span></div>

</div>

<div id="baseMapButtons">
  <p><b>Base Maps</b></p>
  <input type="radio" name="mapchoice" id="camBase"  >
  <label for="camBase">Cambridge Basemap</label>
  <div class="tooltip"><img src=<?php echo $infodot; ?>> 
  <span class="tooltiptext">Shared by <a href="https://gis.cambridgema.gov/arcgis/rest/services/CDDBasemap/MapServer">Cambridge GIS</a></span></div>
  <br>
  <input type="radio" name="mapchoice" id="cam2018"  >
  <label for="camPhoto">Cambridge 2018 Photo</label>
  <div class="tooltip"><img src=<?php echo $infodot; ?>> 
  <span class="tooltiptext">Shared by <a href="https://gis.cambridgema.gov/arcgis/rest/services/gpvHistorical/MapServer/25">Cambridge GIS</a></span></div>
  <br>
  <input type="radio" name="mapchoice" id="cam2010"  >
  <label for="cam2010">Cambridge 2010 Photo</label>
  <div class="tooltip"><img src=<?php echo $infodot; ?>> 
  <span class="tooltiptext">Shared by <a href="https://gis.cambridgema.gov/arcgis/rest/services/gpvHistorical/MapServer/28">Cambridge GIS</a></span></div>
  <br>
  <input type="radio" name="mapchoice" id="cam1995"  >
  <label for="cam1995">Cambridge 1995 Photo</label>
  <div class="tooltip"><img src=<?php echo $infodot; ?>> 
  <span class="tooltiptext">Shared by <a href="https://gis.cambridgema.gov/arcgis/rest/services/gpvHistorical/MapServer/33">Cambridge GIS</a></span></div>
  <br>
  <input type="radio" name="mapchoice" id="cam1978"  >
  <label for="cam1978">Cambridge 1978 Photo</label>
  <div class="tooltip"><img src=<?php echo $infodot; ?>> 
  <span class="tooltiptext">Shared by <a href="https://gis.cambridgema.gov/arcgis/rest/services/gpvHistorical/MapServer/28">Cambridge GIS</a></span></div>
  <br>
  <input type="radio" name="mapchoice" id="cam1969"  >
  <label for="cam1969">Cambridge 1969 Photo</label>
  <div class="tooltip"><img src=<?php echo $infodot; ?>> 
  <span class="tooltiptext">Shared by <a href="https://gis.cambridgema.gov/arcgis/rest/services/gpvHistorical/MapServer/31">Cambridge GIS</a></span></div>
  <br>
  <input type="radio" name="mapchoice" id="cam1947"  >
  <label for="cam1947">Cambridge 1947 Photo</label>
  <div class="tooltip"><img src=<?php echo $infodot; ?>> 
  <span class="tooltiptext">Shared by <a href="https://gis.cambridgema.gov/arcgis/rest/services/gpvHistorical/MapServer/30">Cambridge GIS</a></span></div>
  <br>

  <input type="radio" name="mapchoice" id="cam1936"  >
  <label for="cam1936">1936 Bromley </label>
  <div class="tooltip"><img src=<?php echo $infodot; ?>> 
  <span class="tooltiptext">Shared by <a href="https://mapwarper.net/layers/546">MapWarper.org</a></a></span></div>
  <br>

  <input type="radio" name="mapchoice" id="bromley1916"  >
  <label for="bromley1916">1916 Bromley</label>
  <div class="tooltip"><img src=<?php echo $infodot; ?>> 
  <span class="tooltiptext">Shared by <a href="https://gis.cambridgema.gov/arcgis/rest/services/gpvHistorical/MapServer/35">Cambridge GIS</a></span></div>
  <br>

  <input type="radio" id="bromley1894" name="mapchoice">
  <label for="bromley1894">1894 Bromley</label>
  <div class="tooltip"><img src=<?php echo $infodot; ?>> 
  <span class="tooltiptext">Shared by <a href="https://mapjunction.com/VIEWER/17810" target="Cdash_Link">MapJunction</a>, <a href="https://mapwarper.net/layers/920" target="Cdash_Link">MapWarper</a></span></div>

<br>
  <input type="radio" id="hopkins1873" name="mapchoice">
  <label for="hopkins1873">1873 Hopkins</label>
  <div class="tooltip"><img src=<?php echo $infodot; ?>> 
  <span class="tooltiptext">Shared by <a href="https://collections.leventhalmap.org/search/commonwealth:tt44pw432" target="Cdash_Link">Leventhal Map and Education Center </a> at Boston Public Library</span></div>
  <br>
  <input type="radio" id="chase1865" name="mapchoice">
  <label for="chase1865">1865 J.G. Chase</label>
  <div class="tooltip"><img src=<?php echo $infodot; ?>> 
  <span class="tooltiptext">Shared by <a href="https://gis.cambridgema.gov/arcgis/rest/services/gpvHistorical/MapServer/29">Cambridge GIS</a></span></div>

</div>


<script type="text/javascript">

function isIE() {
  ua = navigator.userAgent;
  /* MSIE used to detect old browsers and Trident used to newer ones*/
  var is_ie = ua.indexOf("MSIE ") > -1 || ua.indexOf("Trident/") > -1;
  
  return is_ie; 
}
/* Create an alert to show if the browser is IE or not */
if (isIE()){
    alert('CDASH Map will not display in Internet Explorer (latest update in 2013).  Please use a modern browser.');
}else{
    //alert('It is NOT InternetExplorer');
}

// Provides contnt for the CDASH Split map  form. 
$(document).ready(function(){

 

// Set up a dictionary of basemap layers.  The keys of this dictionary are referred to by the 
// mapchoice radio buttons.


let camBase = L.esri.tiledMapLayer({
     url:'https://gis.cambridgema.gov/arcgis/rest/services/CDDBasemap/MapServer',
     // only necessary for old versions of ArcGIS Server
            useCors: false,
            maxZoom: 20,
            attribution: '<a href="https://gis.cambridgema.gov/arcgis/rest/services/CDDBasemap/MapServert">Cambridge GIS</a>'
   });

//'camPhoto': L.esri.imageMapLayer({
//     url:'https://gis.cambridgema.gov/arcgis/rest/services/OrthosCambridge/MapServer',
//     // only necessary for old versions of ArcGIS Server
//            //useCors: true,
//            maxZoom: 20,
//            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
//   }),

//'camAddBase': L.esri.imageMapLayer({
//     url:'https://gis.cambridgema.gov/arcgis/rest/services/gpvAddress/MapServer',
//     // only necessary for old versions of ArcGIS Server
//            useCors: true,
//            maxZoom: 20,
//            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
//   }),

let camAddBase = L.esri.dynamicMapLayer({
  url: 'https://gis.cambridgema.gov/arcgis/rest/services/gpvAddress/MapServer',
  useCors: false,
  attribution: '<a href="https://gis.cambridgema.gov/arcgis/rest/services/gpvAddress/MapServer">Cambridge GIS</a>'
});

let cam2018 =  L.esri.dynamicMapLayer({
  url: 'https://gis.cambridgema.gov/arcgis/rest/services/OrthosCambridge/MapServer',
  useCors: false,
  attribution: '<a href="https://gis.cambridgema.gov/arcgis/rest/services/OrthosCambridge/MapServer">Cambridge GIS</a>'
});

let cam1947 =  L.esri.dynamicMapLayer({
  url: 'https://gis.cambridgema.gov/arcgis/rest/services/gpvHistorical/MapServer',
  layers: [30],
  useCors: false,
  attribution: '<a href="https://gis.cambridgema.gov/arcgis/rest/services/gpvHistorical/MapServer/30">Cambridge GIS</a>'
});

let cam2010 =  L.esri.dynamicMapLayer({
  url: 'https://gis.cambridgema.gov/arcgis/rest/services/gpvHistorical/MapServer',
  layers: [28],
  useCors: false,
  attribution: '<a href="https://gis.cambridgema.gov/arcgis/rest/services/gpvHistorical/MapServer/30">Cambridge GIS</a>'
});

let cam1995 =  L.esri.dynamicMapLayer({
  url: 'https://gis.cambridgema.gov/arcgis/rest/services/gpvHistorical/MapServer',
  layers: [33],
  useCors: false,
  attribution: '<a href="https://gis.cambridgema.gov/arcgis/rest/services/gpvHistorical/MapServer/30">Cambridge GIS</a>'
});


let cam1978 =  L.esri.dynamicMapLayer({
  url: 'https://gis.cambridgema.gov/arcgis/rest/services/gpvHistorical/MapServer',
  layers: [32],
  useCors: false,
  attribution: '<a href="https://gis.cambridgema.gov/arcgis/rest/services/gpvHistorical/MapServer/30">Cambridge GIS</a>'
});

let cam1969 =  L.esri.dynamicMapLayer({
  url: 'https://gis.cambridgema.gov/arcgis/rest/services/gpvHistorical/MapServer',
  layers: [31],
  useCors: false,
  attribution: '<a href="https://gis.cambridgema.gov/arcgis/rest/services/gpvHistorical/MapServer/30">Cambridge GIS</a>'
});

let bromley1916 =  L.esri.dynamicMapLayer({
  url: 'https://gis.cambridgema.gov/arcgis/rest/services/gpvHistorical/MapServer',
  layers: [35],
  useCors: false,
  attribution: '<a href="https://gis.cambridgema.gov/arcgis/rest/services/gpvHistorical/MapServer/35">Cambridge GIS</a>'
});

let chase1865 =  L.esri.dynamicMapLayer({
  url: 'https://gis.cambridgema.gov/arcgis/rest/services/gpvHistorical/MapServer',
  layers: [29],
  useCors: false,
  attribution: '<a href="https://gis.cambridgema.gov/arcgis/rest/services/gpvHistorical/MapServer/29">Cambridge GIS</a>'
});



//'osm':      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
//            maxZoom: 19,
//           attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
//        }),

let massGIS = L.esri.tiledMapLayer({
     url: 'https://tiles.arcgis.com/tiles/hGdibHYSPO59RG1h/arcgis/rest/services/MassGIS_Basemap_Detailed_Features/MapServer',
     // only necessary for old versions of ArcGIS Server
//            useCors: true,
            maxZoom: 20,
            attribution: '<a href="https://www.mass.gov/service-details/massgis-base-map">MassGIS</a>'
   });


// OverlayMap layers are defined here
// Now Fetch markers for all cdash locations
  let allMarkers = L.markerClusterGroup({maxClusterRadius: 30,spiderfyOnMaxZoom: 18 });
    queryMarkers(allMarkers);


    let parcelStyle = {
  fillColor: 'blue',
  weight: 1,
  opacity: 0.5,
  color: 'black',
  //dashArray: '3',
  fillOpacity: 0,
  zIndex: 500
 };


    //let parcelsUrl = "<?php echo $this->assetUrl('json/parcels2020.geojson') ?>";
   //console.log("Parcels are at" + parcelsUrl);


let parcels =  L.esri.featureLayer({
    url: 'https://gis.cambridgema.gov/arcgis/rest/services/CDDBasemap/MapServer/195',
    style: parcelStyle

  })

  parcels.bindPopup(function (layer) {
    return L.Util.template('Map-lot <a href="https://www.cambridgema.gov/assess/PropertyDatabase/{ML}" target="_parcel"> {ML}</a>', layer.feature.properties);
  });

  //let parcels = new L.GeoJSON.AJAX(parcelsUrl,{
  //      style: parcelStyle,
  //      onEachFeature: function (feature, layer) {
  //      layer.bindPopup('Map-Lot' + "<a href='https://www.cambridgema.gov/assess/PropertyDatabase/" + feature.properties.ml + "' target='_parcel'> " + feature.properties.ml + "</a>");
  // }});
   //parcels.getAttribution = function() { return '<a href="https://data.cambridgema.gov/Assessing/Assessing-Parcels/rst6-227j">Cambridge GIS </a>'; };

   let natRegister = new L.GeoJSON.AJAX("https://raw.githubusercontent.com/cambridgegis/cambridgegis_data/master/Historical/National_Register_of_Historic_Places/HISTORICAL_NationalRegisterHistoricPlaces.geojson",{onEachFeature: function (feature, layer) {
        layer.bindPopup("Nationaly Registerd Historic Place: <br>" + feature.properties.LabelName);
   }});

   natRegister.getAttribution = function() { return '<a href="https://www.cambridgema.gov/GIS/gisdatadictionary/Historical/HISTORICAL_NationalRegisterHistoricPlaces">Cambridge GIS </a>'; };




   var histMarkerIcon = L.icon({
          iconUrl:  "<?php echo $this->assetUrl('img/blue_oval.png') ?>",
           iconSize: [26,20],
           iconAnchor: [13,10]
        });

  let histMarkers = new L.GeoJSON.AJAX("https://raw.githubusercontent.com/cambridgegis/cambridgegis_data/master/Historical/Historical_Markers/HISTORICAL_HistoricalMarkers.geojson",{onEachFeature: function (feature, layer) {
        layer.bindPopup("Cambridge Historic Marker:<br>" +feature.properties.Name);
        layer.setIcon(histMarkerIcon);
   }});

   histMarkers.getAttribution = function() { return '<a href="https://www.cambridgema.gov/GIS/gisdatadictionary/Historical/HISTORICAL_HistoricalMarkers">Cambridge GIS </a>'; };

   let macrisPtJsonUrl = "<?php echo $this->assetUrl('json/cam_macris_pts.geojson') ?>";
   //console.log('my macrispoints are at ' + macrisPtJsonUrl);

   var redDiskIcon = L.icon({
          iconUrl:  "<?php echo $this->assetUrl('img/reddisk_15px.png') ?>",
           iconSize: [8,8],
           iconAnchor: [4,4]
        });



   let macrisPoints = new L.GeoJSON.AJAX(macrisPtJsonUrl,{onEachFeature: function (feature, layer) {
        layer.bindPopup(feature.properties.HISTORIC_N + "<br><a href='http://mhc-macris.net/details.aspx?mhcid=" + feature.properties.MHCN + "'target = '_macris'>View MACRIS Record</a>");
        layer.setIcon(redDiskIcon);
   }});

   macrisPoints.getAttribution = function() { return '<a href="https://docs.digital.mass.gov/dataset/massgis-data-mhc-historic-inventory">MA Historical Commission </a>'; };

let cam1936 = L.tileLayer('https://mapwarper.net/mosaics/tile/546/{z}/{x}/{y}.png', {
            maxZoom: 20,
            attribution: '<a href="https://mapwarper.net/layers/546">MapWarper.org</a>'
        });

let bromley1894 = L.tileLayer('https://mapwarper.net/mosaics/tile/920/{z}/{x}/{y}.png', {
     // only necessary for old versions of ArcGIS Server
            maxZoom: 20,
            attribution: '<a href="https://mapwarper.net/layers/920">MapJunction / MapWarper</a>'
        });

let hopkins1873 = L.tileLayer('https://s3.us-east-2.wasabisys.com/urbanatlases/39999059015550/tiles/{z}/{x}/{-y}.png',          {
            maxZoom: 20,
            attribution: '<a href="https://collections.leventhalmap.org/search/commonwealth:tt44pw432">Leventhal Map Center</a>'
        });

// And this dictionary oe overlay map layers.
  let overlayMaps = {
    'allMarkers': allMarkers,
    'histMarkers': histMarkers,
    'natRegister': natRegister,
    'camBase': camBase,
    'camAddBase': camAddBase,
    'cam2018': cam2018,
    'cam2010': cam2010,
    'massGIS': massGIS,
    'cam1969': cam1969,
    'cam1978': cam1978,
    'cam1995': cam1995,
    'cam1947': cam1947,
    'cam1936': cam1936,
    'bromley1916': bromley1916,
    'bromley1894': bromley1894,
    'hopkins1873': hopkins1873,
    'chase1865': chase1865,
    'macrisPoints': macrisPoints,
    'parcels': parcels

  };
  

  //Map State information may be saved in the browser's session cache.
//If it is set, use it to check the map layer options.  If not, set up the defaults.

let mapCenter = [42.37, -71.08];
let mapZoom = 15;
let current_basemap_key = 'camAddBase';


// Does browser support storage?

if (typeof(Storage) == "undefined") {
    alert("Your browser does not seem to support sessionStorage.  Try upgrading it.");
} else {  // Browser supports storage. 


    if (sessionStorage.getItem("zoom") != null) {
      mapZoom = sessionStorage.getItem("zoom");
      console.log("Recovered saved zoom: " + mapZoom);
    } else {
      console.log("Initializing stored Map Zoom: " + mapZoom);
      sessionStorage.setItem("zoom", mapZoom );
    };

    if (sessionStorage.getItem("mapLon") == null)  {
      console.log("Initializing stored map center :" + mapCenter);
      sessionStorage.setItem("mapLat", mapCenter[1] );
      sessionStorage.setItem("mapLat", mapCenter[2] );
    } else { 
      mapLat = sessionStorage.getItem("mapLat");
      mapLng = sessionStorage.getItem("mapLng");
      mapCenter = [mapLat, mapLng];
      console.log("Retrieved stored  center location " + mapLat + " " + mapLng);
    };

//    if (sessionStorage.getItem("basemap_key") != null) {
//      current_basemap_key = sessionStorage.getItem("basemap_key");
//      console.log("Retrieved stored  basemap key Checking the radio button " + current_basemap_key);
//      //set the radio button
//      $('input[name=mapchoice][value=' + current_basemap_key + ']').prop('checked',true)
//      //$("#osm").prop('checked',true);
//    } else {
//      console.log("Initializing stored basemap and checking radio button s: " + current_basemap_key);
//      $('input[name=mapchoice][value=' + current_basemap_key + ']').prop('checked',true)
//      //$("#osm").prop('checked',true)
//      sessionStorage.setItem("basemap_key", current_basemap_key);
//    };
  } //Browser supports storage


//Sorry for the extreme comments.  I needed them at the time. 
//This block of code, to END, is the better logic for saving the map state in sessionStorage.
//Read the overlayChecks object out of storage if it exists.  If not, set formValues to an empty object. 
let overlayStates = JSON.parse(sessionStorage.getItem('overlayStates')) || {'allMarkers': true, 'camBase': true};

//This seems to make $checkboxes into a list of all the checkbox objects in the document that are within a 
//Div with ID="overlayBoxes. This should happen once per session.  No state is saved here. 
let $layerPickers = $("#overlayBoxes :checkbox, #baseMapButtons :radio");

//This function populates the overlayStates hash based on the state of the checkboxes in the DOM
// the function is called when a checkbox changes.
function updateStorage(){
  $layerPickers.each(function(){
    //compare first to see which box has changed
    prevState = overlayStates[this.id];
    if (prevState != this.checked) {  //The state has changed
      console.log("The box for  " + this.id + "state is now " + this.checked)
        if (this.checked) {
          console.log("Adding layer " +  this.id);
          map.addLayer(overlayMaps[this.id]);
        } else {
          map.removeLayer(overlayMaps[this.id]);
        }
    }  
    overlayStates[this.id] = this.checked;
  });
  //Here is where the persistent container, overlayStates is populated with a JSON version of the 
  //hash of teh same name. 
  sessionStorage.setItem("overlayStates", JSON.stringify(overlayStates));
}

//Listen for a change among any of the boxes.  Anytime one of them changes
//The updatestorage function reads the check status of each box, updates formValues
//Stringify's the hash and writes that into the formValues bucket of the browser storage.  
// It is interesting that they did not just write out the function inside of here...
$layerPickers.on("change", function(){
  updateStorage();
});

//Everytime page loads, set the checked status from each entry in overlayStates (which is presumed to exist) 
//and updates the checked property of the corresponding checkbox in the DOM.  This has to ve called after the 
// map has been put on the screen.  
function drawOverlays(){
  $.each(overlayStates, function(key, value) {
    $("#" + key).prop('checked', value);
    //let attribution = overlayMaps[key].getAttribution;
    //$("#" + key + "_attribution").prop('innerHTML', 
    //   "<a href='" + attribution + "' target='cdash_metadata'> <img src=<?//php echo $infodot?>></a><br>");
    if (value) {  // checkbox is checked for layer.  Draw it!
          console.log("Adding Overlay " +  this.id);
          map.addLayer(overlayMaps[key]);
  }
});
} //END of overlayState code.



// Now we're ready to draw the map. 
var map = L.map('map', { center: mapCenter, zoom: mapZoom, maxZoom: 19 });
map.addLayer(overlayMaps.massGIS);
overlayMaps.massGIS.setZIndex(0);

drawOverlays();  //reads the checkboxes and adds the layers to the map accordingly. 
//drawBaseMaps(); 

// If map is moved, save extent info into browser cache
map.on('zoomend', function() {
    var newZoom = map.getZoom();
    if (typeof(Storage) !== "undefined") {
        sessionStorage.setItem("zoom", newZoom );
        console.log("Zoom level is now. " + newZoom);
       } else {
        console.log("Can't save zoom. No browser storage support");
       }
    });
    
    map.on('moveend', function() {
      let newCenter = [map.getCenter().lat, map.getCenter().lng];
      //let newCenter = map.getCenter();
      console.log("After move, map center is" + newCenter );
       if (typeof(Storage) !== "undefined") {
         sessionStorage.setItem("mapLat", map.getCenter().lat );
         sessionStorage.setItem("mapLng", map.getCenter().lng );
       } else {
          console.log("Can't save new center. No browser storage support");
       }
    });


// The following reads the marker data that Omeka writes into the html
// div with class = .mapping-marker-popup-content.  The presence of this 
// div indicates that the Omeka Item in the right-hand window includes a marker
// which wil be moved to the center of the map and featured with a special marker. 

  var featuredIcon = L.icon({
          iconUrl:  "<?php echo $this->assetUrl('img/redcircle.png') ?>",
           iconSize: [27,27],
           iconAnchor: [13,13]
        });


    let markerCenter = [];
    let featuredMarkers = new L.FeatureGroup();
    if ($('.mapping-marker-popup-content').length === 0) {
      console.log("No featured marker in content");
    }

    $('.mapping-marker-popup-content').each(function() {
        var popup = $(this).clone().show();
        var latLng = new L.LatLng(popup.data('marker-lat'), popup.data('marker-lng'));
        markerCenter = [popup.data('marker-lat'), popup.data('marker-lng')];


        var featuredMarker = new L.Marker(latLng);


        console.log("got omeka marker at " + latLng)

       featuredMarker.bindPopup(popup[0]);
       featuredMarker.setIcon(featuredIcon);
       featuredMarker.setZIndexOffset(2000);

    featuredMarkers.addLayer(featuredMarker);
   });

   map.addLayer(featuredMarkers);
   featuredMarkers.bringToFront();
 

// Here is some stuff from modules\Mapping\asset\js\mapping-show.js
// Centers map on featured marker if it exists.  Otherwise does nothing. 
// THis runs each time the page reloads. 


var setView = function() {
    if (markerCenter.length === 2) {      //If there is an Omeka marker present.
        map.panTo(markerCenter, mapZoom); //Pan to the marker and keep the current zoom.
    } else {
      //map.panTo(mapCenter, mapZoom);
        } 
    };

setView();

// End insertion from modules\Mapping\asset\js\mapping-show.js


//This part handles the scroll behavior where the map and menu bar become fixed at the top 
//of the page after all but 25 pixels of the header image have scrolled out.   
//var changePoint = $('#menubar').offset().top;
//$(window).scroll(function ()  {
//    if ($(window).scrollTop() >= changePoint - 25) {
//        $('#menubar').removeClass('scrolls');
//        $('#menubar').addClass('fixed');
//        $('#cdash_map').removeClass('scrolls');
//        $('#cdash_map').addClass('fixed');
//        $('header').removeClass('scrolls');
//        $('header').addClass('fixed');
//    }
//    else {
//      $('#menubar').addClass('scrolls');
//      $('#menubar').removeClass('fixed');
//      $('#cdash_map').addClass('scrolls');
//      $('#cdash_map').removeClass('fixed');
//      $('header').addClass('scrolls');
//      $('header').removeClass('fixed');
//    }
//});

//This function uses a call to a php script that queries omeka's mysql database.
//The result is a list of all of the CDASH Location items with their titles, 
//coordinates and Item ID.  Maybe this should be done through the Omeka API or 
//Doctrine or something.  
function queryMarkers(markerGroup) {
  $.ajax({
         url : "<?php echo $this->assetUrl('php/server3.php') ?>",
         //url : 'http://192.168.99.101/chc_omeka_files/jq_ajax/server3.php',
         type: "POST",
         dataType: 'json',
         //data: form.serialize(),
        success:function(response) {
        if(response.success == true ) {
            console.log("Query succeeded.  SQL: " + response.sql + "<br> Searchterm: " + response.searchterm );
            //printTable(response.resp)

            pushMarkers(response.resp, markerGroup);
            return (response.resp);
          } 
        //if(response.success == false ) {
        //    msg.html("Query failed with:");
        //   }
        if(response.error == true ) {
            console.log("Query failed SQL:" + response.sql + "<br> Searchterm: " + response.searchterm );
          }else{console.log("No apparent error with markerquery: " + this.url);};
        
        }, //Ajax options

        error:function(xhr,textStatus,errorThrown){
            var str = "ERROR : SERVER error<br>" + xhr + "<br>" + 
                       textStatus + "<BR>" + errorThrown ;
             console.log(str);
          } // error callback function block
        }); // ajax call ends
} //closes querymarkers function


var sepiaBalloon = L.icon({
  iconUrl: "<?php echo $this->assetUrl('img/sepia_marker_hollow2.png') ?>",
  //iconUrl: '/chc_omeka_files/modules/Mapping/view/mapping/site/index/Map-Marker-PNG-Picture.png',
   iconSize: [30,30],
   iconAnchor: [14,26]
});

// Takes the result from the SQL query and makes a marker for each.
function pushMarkers(json_response, markerGroup){
  var cambMarkerList = [];
  for (i = 0; i < json_response.length; i++) {
    var row = json_response[i];
    var title = row['title'] ;
    var item_id =  row['item_id'];
    //For Dev
    //var item_url = "http://192.168.99.101/omeka-s/s/cdash/item/" + item_id;
    // for Prod
    var item_url = "/omeka-s/s/cdash/item/" + item_id;
    var marker = L.marker(L.latLng(row['lat'], row['lng']), { title: title });
    marker.id = row['item_id'];
    marker.item_url = "/omeka-s/s/cdash/item/" + item_id;
    //marker.item_url = "http://192.168.99.101/omeka-s/s/cdash/item/" + item_id;
    marker.title = row['title'];
    marker.setIcon(sepiaBalloon);
    //marker.setZIndexOffset(1000);

  // 'click' the new marker to call onMarkerClick function (Loads page )
    marker.on('click', onMarkerClick);
    cambMarkerList.push(marker);
  }
    //console.log('start clustering: ' + window.performance.now());
    markerGroup.addLayers(cambMarkerList);
    console.log('pushed cambridge markers')
} // closes pushmarkers function

function onMarkerClick(e) {   
  window.location.replace(e.target.item_url);
}

}); // $(document).ready(function() ends
</script>

